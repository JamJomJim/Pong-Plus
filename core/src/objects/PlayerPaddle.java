package objects;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.box2d.World;
import com.powerpong.game.PowerPong;

/**
 * Created by Nick on 2/3/2017.
 */
public class PlayerPaddle extends Paddle {

    public static final float VERTICAL_INPUT_CAPTURE = 5; //this is half of the y-height (in meters) that input within (relative to this paddle's y-position) will be handled by this paddle

    private float movespeed; //movespeed is a separate variable so that paddle speed can be changed by powerups etc.
    private Vector3 touchPos, touchDraggedPos;
    private OrthographicCamera worldCam;

    //pointers basically keep track of fingers. For example, if no fingers are touching the screen, then you touch it,
    //the pointer of that finger will be zero. If you drag that finger around, the pointer will still be zero.
    //touching another finger without lifting the first one will give the second finger a pointer of one.
    //upon releasing the first finger, the second finger's pointer will still be one, but the first finger's
    //point will have been "released", and it will be filled by the next finger that touches. So when a new finger touches,
    //it will take the lowest pointer value that is not already in use by another finger.
    private int movePointer; //represents the pointer for the finger that most recently touched within the vertical input capture,
    //and therefore the one that is controlling the paddle

    public PlayerPaddle(String textureName, float x, float y, World world, OrthographicCamera cam) {
        super(textureName, x, y, world);
        touchPos = new Vector3(0, 0, 0);
        touchDraggedPos = new Vector3(0, 0, 0);
        this.worldCam = cam;
    }

    public boolean touchDown(int x, int y, int pointer, int button) {
        /*use camera.unproject() to convert touch coordinates to viewport/world coordinates
        NOTE: after being unprojected, the numbers are in box2d coordinates
        so touching the top right of the screen, after being unprojected, will yield x: 18, y: 32 REGARDLESS OF RESOLUTION
        0,0 is the center of the screen, positive y is up, positive x is right
        To convert the returned box2d coords to pixels in the viewport, multiply them by PowerPong.PIXELS_IN_METER
        If you want the pixel coordinates relative to the device's screen, simply use x and y without any unprojecting or modifying etc.
        Reason for always having a touchPos Vector3 is to minimize resource creation/destruction*/
        worldCam.unproject(touchPos.set(x, y, 0));
        //System.out.println("touchDown pointer: " + pointer + "  x: " + touchPos.x + "  y: " + touchPos.y);
        //check that the touchPos is within the vertical confines of the area that touches will affect the paddle within
        if (touchPos.y - body.getPosition().y < VERTICAL_INPUT_CAPTURE && touchPos.y - body.getPosition().y > -VERTICAL_INPUT_CAPTURE) {
            destination.set(touchPos.x, 0);
            movePointer = pointer;
            return true; //return true because this paddle handled the touch input and it does not need to be evaluated by the next InputProcessor
        }
        return false; //the touchPos was not within the bounds that would affect this paddle, so it will be passed on to the next InputProcessor
    }

    public boolean touchUp (int x, int y, int pointer, int button) {
        //checking this checks if the pointer of this event was generated by the finger that most recently touched within the input capture area
        if (pointer == movePointer) {
            destination.set(body.getPosition().x, body.getPosition().y);
            movePointer = -1;
            return true;
        }
        return false;
    }

    //note that when multiple fingers are held on the screen, anytime one of them is dragged, touchDragged events will be
    //fired for EVERY finger touching the screen, even if they didn't move.
    public boolean touchDragged(int x, int y, int pointer) {
        worldCam.unproject(touchDraggedPos.set(x, y, 0));
        //System.out.println("touchDragged pointer: " + pointer + "  x: " + touchDraggedPos.x + "  y: " + touchDraggedPos.y);
        if (pointer == movePointer) {
            destination.set(touchDraggedPos.x, touchDraggedPos.y);
            return true;
        }
        return false;
    }
}
